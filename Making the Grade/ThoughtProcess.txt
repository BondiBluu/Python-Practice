Instructions: Count and calculate class results
Rounding scores
Define round_scores(student scores) to return student results as an int and not float
Take a list of all student’s scores
Consume the list, returning a new list of all the scores converted to ints
Order does not matter
Answer: Can most likely be solved using “pop” and “append” with a loop.
Create a second list that, when the numbers are used in the loop, pop it out of the first list and push it into the second.
For x in student_scores: student_scores.pop(x)
rounded_scored.append(x)
While while student_scores:
        rounded_num = round(student_scores.pop(0))
        rounded_scores.append(rounded_num)
Non-passing students
Define count_as_failes_students(student_scores) that counts who didn’t pass (40 or below)
Answer: make a new list that will take the new scores.
In a for loop, make an if statement that takes those who score 40 and below, append them to the new list.
Return the length of that list
The “best”
Define above_thershold(student_scores, threshold) to find students greater than or equal to the current threshold
Answer: make a list of top_scorers.
Create a loop that also sees if the threshold >= the current student’s grade
If so, add them to top_scorers
Calculating letter grades
Define letter_grades(highest) to assign letter grades to students, taking into account that the highest grade will not always be 100
<= 40 will always be failing.
Answer: Calculate the interval size by subtracting 40 from the highest score and dividing by 4.
Use interval size to determine the lower thresholds for each grade.
Matching names to scores
Define student_ranking(student_scores, student_names) to match each list of student names with the list of student_scores
Answer: most likely enumerator for loops. Group the lists into a list of one string
A “perfect” score
Define perfect_score(student_info) to return the name and score of the first person who scored a 100.
Answer: Same with 5th number, then break
